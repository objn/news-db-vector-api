"""
Script to automatically generate SQLAlchemy models from existing database tables.
This will introspect your PostgreSQL database and create Python model classes.
"""

from sqlalchemy import MetaData, Table, inspect
from sqlalchemy.ext.automap import automap_base
from database import engine
import os


def reflect_database():
    """
    Reflect the database and print information about tables.
    """
    print("=" * 60)
    print("DATABASE REFLECTION")
    print("=" * 60)
    
    # Create metadata instance
    metadata = MetaData()
    
    try:
        # Reflect all tables from database
        metadata.reflect(bind=engine)
        
        print(f"\n‚úì Found {len(metadata.tables)} tables in the database:\n")
        
        for table_name, table in metadata.tables.items():
            print(f"üìã Table: {table_name}")
            print(f"   Columns:")
            for column in table.columns:
                nullable = "NULL" if column.nullable else "NOT NULL"
                pk = "PRIMARY KEY" if column.primary_key else ""
                print(f"     - {column.name}: {column.type} {nullable} {pk}")
            print()
        
        return metadata
        
    except Exception as e:
        print(f"\n‚úó Error reflecting database: {e}")
        return None


def generate_automap_models():
    """
    Generate automapped models that can be used immediately.
    """
    print("=" * 60)
    print("GENERATING AUTOMAP MODELS")
    print("=" * 60)
    
    try:
        # Create automap base
        AutoBase = automap_base()
        
        # Reflect the database
        AutoBase.prepare(autoload_with=engine)
        
        print("\n‚úì Automap models generated successfully!\n")
        print("Available model classes:")
        for class_name in AutoBase.classes.keys():
            print(f"  - {class_name}")
        
        return AutoBase
        
    except Exception as e:
        print(f"\n‚úó Error generating automap models: {e}")
        return None


def generate_model_file(output_file="models.py"):
    """
    Generate a Python file with SQLAlchemy model definitions.
    """
    print("=" * 60)
    print(f"GENERATING MODEL FILE: {output_file}")
    print("=" * 60)
    
    metadata = MetaData()
    
    try:
        metadata.reflect(bind=engine)
        
        # Start building the models file content
        content = '''"""
Auto-generated SQLAlchemy models from database reflection.
Generated by: generate_models.py
"""

from sqlalchemy import Column, Integer, String, Boolean, DateTime, Text, Float, ForeignKey
from sqlalchemy.orm import relationship
from database import Base

'''
        
        # Generate model classes for each table
        for table_name, table in metadata.tables.items():
            class_name = ''.join(word.capitalize() for word in table_name.split('_'))
            
            content += f'\nclass {class_name}(Base):\n'
            content += f'    __tablename__ = "{table_name}"\n\n'
            
            # Add columns
            for column in table.columns:
                col_type = str(column.type)
                col_def = f'    {column.name} = Column('
                
                # Add type
                if 'VARCHAR' in col_type or 'TEXT' in col_type:
                    if 'VARCHAR' in col_type:
                        length = col_type.split('(')[1].split(')')[0] if '(' in col_type else 'None'
                        col_def += f'String({length})'
                    else:
                        col_def += 'Text'
                elif 'INTEGER' in col_type or 'SERIAL' in col_type:
                    col_def += 'Integer'
                elif 'BOOLEAN' in col_type:
                    col_def += 'Boolean'
                elif 'TIMESTAMP' in col_type or 'DATETIME' in col_type:
                    col_def += 'DateTime'
                elif 'FLOAT' in col_type or 'DOUBLE' in col_type or 'NUMERIC' in col_type:
                    col_def += 'Float'
                else:
                    col_def += f'String'  # Default fallback
                
                # Add constraints
                if column.primary_key:
                    col_def += ', primary_key=True'
                if not column.nullable:
                    col_def += ', nullable=False'
                if column.unique:
                    col_def += ', unique=True'
                
                col_def += ')\n'
                content += col_def
            
            content += '\n'
        
        # Write to file
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print(f"\n‚úì Models file generated successfully: {output_file}\n")
        print("You can now import and use these models in your application:")
        print(f"  from {output_file.replace('.py', '')} import *")
        
        return True
        
    except Exception as e:
        print(f"\n‚úó Error generating model file: {e}")
        return False


if __name__ == "__main__":
    print("\nüîç Starting database introspection...\n")
    
    # Step 1: Reflect and display database structure
    metadata = reflect_database()
    
    if metadata:
        # Step 2: Generate automap models (for immediate use)
        automap_base = generate_automap_models()
        
        # Step 3: Generate models.py file (for customization)
        print()
        generate_model_file()
        
        print("\n" + "=" * 60)
        print("‚úì ALL DONE!")
        print("=" * 60)
        print("\nNext steps:")
        print("1. Check the generated 'models.py' file")
        print("2. Customize the models as needed")
        print("3. Import models in your application")
        print("4. Use them with FastAPI endpoints")
        print()
